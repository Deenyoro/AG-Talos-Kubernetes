---
# yaml-language-server: $schema=https://flux.jank.ing/helmrelease/v2/github/bjw-s/helm-charts/main/charts/library/common/values.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: plex
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: intel-device-plugin-gpu
      namespace: gpu-system
    - name: rook-ceph-cluster
      namespace: rook-ceph
  values:
    defaultPodOptions:
      nodeSelector:
        intel.feature.node.kubernetes.io/gpu: "true"
    controllers:
      plex:
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          labels:
            plex-gw: "true"
#            setAirUsGateway: "true"
          securityContext:
            runAsUser: 65534
            runAsGroup: 65534
            fsGroup: 65534
            fsGroupChangePolicy: "OnRootMismatch"
            supplementalGroups:
              - 44
              - 109
        initContainers:
          01-pkcs12-reencrypt:
            image:
              repository: ghcr.io/onedr0p/plex
              tag: 1.41.3.9292-bc7397402
            command:
              - /bin/sh
              - -c
            args:
              - openssl pkcs12 -legacy -in /config/certs-old/keystore.p12 -passin file:/pkcs12-password/p12-password -noenc -out /tmp/temp.pem &&
                openssl pkcs12 -export -out /config/certs/keystore.p12 -passout file:/pkcs12-password/p12-password -in /tmp/temp.pem &&
                rm -f /tmp/temp.pem
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/plex
              tag: 1.41.3.9292-bc7397402@sha256:9a9196a109437035b9b20c8d368c569555623f14faf2247c3aa0a84cf568242d
            env:
              TZ: America/New_York
            envFrom:
              - secret: plex-secret
            probes:
              liveness: &probes
                enabled: false
                custom: true
                spec:
                  httpGet:
                    path: /identity
                    port: 32400
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false
                spec:
                  failureThreshold: 30
                  periodSeconds: 10
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
                memory: 6Gi
              limits:
                gpu.intel.com/i915: 1
                memory: 6Gi
    service:
      app:
        controller: plex
        type: LoadBalancer
        annotations:
          lbipam.cilium.io/ips: 10.10.12.241
        ports:
          http:
            port: 32400
    ingress:
      external:
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN_LEGACY}
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
          nginx.ingress.kubernetes.io/configuration-snippet: |
            # App root redirect: If a request to / comes in -> 302 redirect to the plex landing page
            # (but only if it doesn't contain the X-Plex-Device-Name header or query argument)
            # This retains API endpoint access for official Plex clients and authenticated sessions.
            set $r "";
            if ($http_x_plex_device_name = '') { set $r "Y"; }
            if ($arg_X-Plex-Device-Name = '') { set $r "$${r}Y"; }
            if ($r = YY) {
              rewrite ^/$ https://$http_host/web/index.html;
            }

            gzip on;
            gzip_vary on;
            gzip_min_length 256;
            gzip_proxied any;
            gzip_comp_level 9;
            gzip_disable "MSIE [1-6]\.";
            gzip_types
              text/css
              text/xml
              text/plain
              text/javascript
              text/cache-manifest
              text/x-cross-domain-policy
              application/javascript
              application/x-javascript
              application/json
              application/manifest+json
              application/xml
              application/xml+rss
              application/xhtml+xml
              application/rss+xml
              application/rdf+xml
              application/atom+xml
              application/atom_xml
              application/geo+json
              application/ttf
              application/x-ttf
              application/x-font-ttf
              application/x-font-otf
              application/x-font-truetype
              application/x-font-opentype
              application/x-web-app-manifest+json
              application/vnd.ms-fontobject
              font/eot
              font/otf
              font/ttf
              font/opentype
              image/svg+xml
              image/x-icon
              image/bmp;

            send_timeout 3600; # some players don't reopen a socket and playback stops totally instead of resuming after an extended pause (e.g. Chrome)

            proxy_set_header Sec-Websocket-Extensions $http_sec_websocket_extensions;
            proxy_set_header Sec-Websocket-Key $http_sec_websocket_key;
            proxy_set_header Sec-Websocket-Protocol $http_sec_websocket_protocol;
            proxy_set_header Sec-Websocket-Version $http_sec_websocket_version;

            proxy_set_header Accept-Encoding "";

            add_header Referrer-Policy "same-origin" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options sameorigin;
            add_header X-XSS-Protection "1; mode=block" always;
        hosts:
          - host: "{{ .Release.Name }}.zebernst.dev"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - "{{ .Release.Name }}.zebernst.dev"
            secretName: "${SECRET_DOMAIN_LEGACY/./-}-production-tls"
      internal:
        className: internal
        annotations:
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
        hosts:
          - host: "plex-int.${SECRET_DOMAIN_LEGACY}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
              - "plex-int.${SECRET_DOMAIN_LEGACY}"
            secretName: "${SECRET_DOMAIN_LEGACY/./-}-production-tls"
    persistence:
      config:
        existingClaim: plex
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server
      # Separate PVC for cache to avoid backing up cache files
      cache:
        existingClaim: plex-cache
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server/Cache
      logs:
        type: emptyDir
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server/Logs
      tmp:
        type: emptyDir
      cert:
        type: secret
        name: "${SECRET_DOMAIN_LEGACY/./-}-production-tls"
        globalMounts:
          - path: /config/certs-old
            readOnly: true
      cert-secret:
        type: secret
        name: legacy-cert-p12
        globalMounts:
          - path: /pkcs12-password
            readOnly: true
      cert-tmp:
        type: emptyDir
        globalMounts:
          - path: /config/certs
      transcode:
        type: emptyDir
      media:
        type: nfs
        server: 192.168.90.101
        path: /mnt/QuadSquad/EC/
        globalMounts:
          - path: /mnt/QuadSquad/EC/
